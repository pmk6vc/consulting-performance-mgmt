name: Deploy main branch to production env

on:
  push:
    branches: [ main ]

# TODO: Figure out how to get service port modifications to work
# The service port can be changed in theory, but the deployment fails because the deploy time greatly increases when the port is anything other than default 8080
# Cloud Run has a strict requirement to get the service listening to passed port within 4min, which fails for anything other than default
env:
  TF_WORKSPACE_NAME: production
  TF_WORKING_DIR: infra
  SERVICE_NAME: consulting-performance-mgmt-production
  SERVICE_PORT: 8080

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: PRODUCTION
    outputs:
      DB_CONNECTION_STRING: ${{ steps.db.outputs.db_connection_string }}
      ARTIFACT_REPO_NAME: ${{ steps.repo.outputs.artifact_repo }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # TODO: Check out keyless authentication for service accounts
      - name: Terraform init
        working-directory: infra
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Terraform select workspace
        working-directory: infra
        run: terraform workspace select $TF_WORKSPACE_NAME
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Terraform apply
        working-directory: infra
        run: terraform apply -auto-approve
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_CREDENTIALS }}
          TF_VAR_gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
          TF_VAR_db_username_secret: ${{ vars.DB_USERNAME_SECRET }}
          TF_VAR_db_username_secret_version: ${{ vars.DB_USERNAME_SECRET_VERSION }}
          TF_VAR_db_password_secret: ${{ vars.DB_PASSWORD_SECRET }}
          TF_VAR_db_password_secret_version: ${{ vars.DB_PASSWORD_SECRET_VERSION }}
          TF_VAR_region: ${{ vars.REGION }}

      - name: Fetch DB connection string
        id: db
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: echo "db_connection_string=$(terraform output db_connection_string | tr -d '"')" >> "$GITHUB_OUTPUT"
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Fetch artifact registry repo name
        id: repo
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: echo "artifact_repo=$(terraform output artifact_registry_repo | tr -d '"')" >> "$GITHUB_OUTPUT"
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_CREDENTIALS }}

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    environment: PRODUCTION
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get registry image name
        id: image_name
        run: echo "IMAGE_NAME=${{ vars.REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO_NAME }}/${{ env.SERVICE_NAME }}" >> $GITHUB_OUTPUT
        env:
          ARTIFACT_REPO_NAME: ${{ needs.terraform.outputs.ARTIFACT_REPO_NAME }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v1.1.0
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Delete images in registry
        run: |
          if [[ $(gcloud artifacts docker images list ${{ env.IMAGE }}) ]]; then
            echo "At least one version of ${{ env.IMAGE }} version found - deleting"
            gcloud artifacts docker images delete ${{ env.IMAGE }}
          else
            echo "${{ env.IMAGE }} not found - nothing to delete"
          fi
        env:
          IMAGE: ${{ steps.image_name.outputs.IMAGE_NAME }}

      - name: Authorize Docker to push to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.REGION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Build and push Docker image to registry
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: |
            SERVER_PORT=${{ env.SERVICE_PORT }}
          tags: |
            ${{ env.IMAGE }}:${{ github.sha }}
            ${{ env.IMAGE }}:latest
          push: true
        env:
          IMAGE: ${{ steps.image_name.outputs.IMAGE_NAME }}

      # TODO: Figure out --allow-unauthenticated
      - name: Deploy
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1.0.1
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ vars.REGION }}
          image: ${{ env.IMAGE }}:${{ github.sha }}
          env_vars: |
            SPRING_PROFILE=gcp
            DB_CONNECTION_NAME=${{ env.DB_CONNECTION_STRING }}
            GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID }}
            DB_USERNAME_SECRET=${{ vars.DB_USERNAME_SECRET }}
            DB_USERNAME_SECRET_VERSION=${{ vars.DB_USERNAME_SECRET_VERSION }}
            DB_PASSWORD_SECRET=${{ vars.DB_PASSWORD_SECRET }}
            DB_PASSWORD_SECRET_VERSION=${{ vars.DB_PASSWORD_SECRET_VERSION }}
          flags: |
            --min-instances=0
            --max-instances=1
            --memory=512Mi
            --cpu=1
            --port=${{ env.SERVICE_PORT }}
        env:
          DB_CONNECTION_STRING: ${{ needs.terraform.outputs.DB_CONNECTION_STRING }}
          IMAGE: ${{ steps.image_name.outputs.IMAGE_NAME }}

      - name: Show URL
        run: echo ${{ steps.deploy.outputs.url }}