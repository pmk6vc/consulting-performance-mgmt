name: Deploy staging branch to staging env

on:
  push:
    branches: [ staging ]

env:
  TF_WORKSPACE_NAME: staging
  TF_WORKING_DIR: infra
  SERVICE_NAME: consulting-performance-mgmt-staging
  SERVICE_PORT: 8080

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: STAGING
    outputs:
      DB_CONNECTION_STRING: ${{ steps.db.outputs.db_connection_string }}
      ARTIFACT_REPO_NAME: ${{ steps.repo.outputs.artifact_repo }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # TODO: Check out keyless authentication for service accounts
      - name: Terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Terraform select workspace
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform workspace select $TF_WORKSPACE_NAME
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Terraform apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_CREDENTIALS }}
          TF_VAR_gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
          TF_VAR_db_username_secret: ${{ vars.DB_USERNAME_SECRET }}
          TF_VAR_db_username_secret_version: ${{ vars.DB_USERNAME_SECRET_VERSION }}
          TF_VAR_db_password_secret: ${{ vars.DB_PASSWORD_SECRET }}
          TF_VAR_db_password_secret_version: ${{ vars.DB_PASSWORD_SECRET_VERSION }}
          TF_VAR_region: ${{ vars.REGION }}

      - name: Fetch DB connection string
        id: db
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: echo "db_connection_string=$(terraform output db_connection_string | tr -d '"')" >> "$GITHUB_OUTPUT"
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Fetch artifact registry repo name
        id: repo
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: echo "artifact_repo=$(terraform output artifact_registry_repo | tr -d '"')" >> "$GITHUB_OUTPUT"
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_CREDENTIALS }}

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    environment: STAGING
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: DUMMY
        run: echo "$OUTPUT1 $OUTPUT2"
        env:
          OUTPUT1: ${{ needs.terraform.outputs.DB_CONNECTION_STRING }}
          OUTPUT2: ${{ needs.terraform.outputs.ARTIFACT_REPO_NAME }}

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: |
            SERVER_PORT=${{ env.SERVICE_PORT }}
          tags: gcr.io/${{ vars.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          push: false

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v1.1.0
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      # TODO: Find a way to delete all images in repo first
      - name: Push Docker image to artifact registry
        run: docker push ${{ vars.REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO_NAME }}/$SERVICE_NAME:${{ github.sha }}
        env:
          ARTIFACT_REPO_NAME: ${{ needs.terraform.outputs.ARTIFACT_REPO_NAME }}

#      - name: Deploy
#        uses: google-github-actions/deploy-cloudrun@v1.0.1
#        with:
#          service: ${{ env.SERVICE_NAME }}
#          image: gcr.io/${{ vars.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
#          env_vars: |
#            PORT=$SERVICE_PORT
#            SPRING_PROFILE=staging
#            DB_CONNECTION_NAME=$DB_CONNECTION_STRING
#            GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID }}
#            DB_USERNAME_SECRET=${{ vars.DB_USERNAME_SECRET }}
#            DB_USERNAME_SECRET_VERSION=${{ vars.DB_USERNAME_SECRET_VERSION }}
#            DB_PASSWORD_SECRET=${{ vars.DB_PASSWORD_SECRET }}
#            DB_PASSWORD_SECRET_VERSION=${{ vars.DB_PASSWORD_SECRET_VERSION }}
#        env:
#          DB_CONNECTION_STRING: ${{ needs.terraform.outputs.DB_CONNECTION_STRING }}